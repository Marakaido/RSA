/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.Test;

import java.math.BigInteger;
import java.util.BitSet;

import static org.junit.Assert.*;

public class RSATest {
    byte[] bytes = new byte[]{
            (byte)0b01101110,(byte)0b01000101, (byte)0b11011000, (byte)0b10110101
    };

    @Test public void test() {
        byte[] bytes = new byte[]{(byte)0b11101110, (byte)0b10000001};
        BigInteger i = new BigInteger(bytes);
        RSA rsa = new RSA(BigInteger.valueOf(1261), BigInteger.valueOf(7753));
        BigInteger result = i.negate().modPow(rsa.getE(), rsa.getN()).modPow(BigInteger.valueOf(591971), rsa.getN()).negate();
        assertArrayEquals(bytes, result.toByteArray());
    }

    @Test public void keysGeneration() {
        BigInteger i = BigInteger.valueOf(28289);
        RSA rsa = new RSA(BigInteger.valueOf(1261), BigInteger.valueOf(7753));
        assertEquals(i, i.modPow(rsa.getE(), rsa.getN()).modPow(BigInteger.valueOf(591971), rsa.getN()));
    }

    @Test public void segmentationTest() {
        RSA.Segmentator segmentator = new RSA.Segmentator(bytes, 9);
        byte[][] correct = new byte[][]{
                new byte[]{(byte)0b01101110, (byte)0},
                new byte[]{(byte)0b10001011, (byte)0b10000000},
                new byte[]{(byte)0b01100010, (byte)0b10000000},
                new byte[]{(byte)0b10101000, (byte)0}
        };
        int i = 0;
        for (byte[] b: segmentator)
            assertArrayEquals(correct[i++], b);
    }

    @Test public void desegmentationTest() {
        byte[] bytes = new byte[] {
                (byte)0b01101110, (byte)0b0, (byte)0b10001011, (byte)0b10000000,
                (byte)0b01100010, (byte)0b0, (byte)0b10101000, (byte)0b0
        };
        RSA.Desegmentator desegmentator = new RSA.Desegmentator(bytes, 9);
        int i = 0;
        for(byte b : desegmentator)
            assertEquals(0, b&(~this.bytes[i++]));
    }
}
