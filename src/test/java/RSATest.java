/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.math.BigInteger;

import static org.junit.Assert.*;

public class RSATest {
    byte[] bytes = new byte[]{
            (byte)0b01101110,(byte)0b01000101, (byte)0b11011000, (byte)0b10110101
    };

    @Test public void test() {
        byte[] bytes = new byte[]{(byte)0b01101110, (byte)0b10000000};
        BigInteger i = new BigInteger(bytes);
        BigInteger n = BigInteger.valueOf(629);
        BigInteger e = BigInteger.valueOf(5);
        BigInteger d = BigInteger.valueOf(29);
        i = i.shiftRight(16-10);
        BigInteger result = i.modPow(e, n).modPow(d, n);
        result = result.shiftLeft(16-10);
        assertArrayEquals(bytes, result.toByteArray());
    }

    @Test public void keysGeneration() {
        BigInteger i = BigInteger.valueOf(28289);
        RSA rsa = new RSA(BigInteger.valueOf(1261), BigInteger.valueOf(7753));
        assertEquals(i, i.modPow(rsa.getE(), rsa.getN()).modPow(BigInteger.valueOf(591971), rsa.getN()));
    }

    @Test public void encryptTest() throws IOException {
        byte[] crypto = new byte[] {
                (byte)0b0, (byte)0b10000, (byte)0b1, (byte)0b11001,
                (byte)0b0, (byte)0b11011001, (byte) 0, (byte)0b1
        };
        RSA rsa = new RSA(BigInteger.valueOf(37), BigInteger.valueOf(17));
        ByteArrayInputStream in = new ByteArrayInputStream(bytes);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        RSA.encrypt(in, out, rsa.getE(), rsa.getN());
        assertArrayEquals(crypto, out.toByteArray());
    }

    @Test public void decryptTest() throws IOException {
        byte[] crypto = new byte[] {
                (byte)0b0, (byte)0b10000, (byte)0b1, (byte)0b11001,
                (byte)0b0, (byte)0b11011001, (byte) 0, (byte)0b1
        };
        RSA rsa = new RSA(BigInteger.valueOf(37), BigInteger.valueOf(17));
        ByteArrayInputStream in = new ByteArrayInputStream(crypto);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        rsa.decrypt(in, out);
        assertArrayEquals(bytes, out.toByteArray());
    }

    @Test public void decryptEncrypt() throws IOException {
        RSA rsa = new RSA(BigInteger.valueOf(37), BigInteger.valueOf(17));
        ByteArrayInputStream in = new ByteArrayInputStream(bytes);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        ByteArrayOutputStream out2 = new ByteArrayOutputStream();
        RSA.encrypt(in, out, rsa.getE(), rsa.getN());

        rsa.decrypt(new ByteArrayInputStream(out.toByteArray()), out2);
        assertArrayEquals(bytes, out2.toByteArray());
    }
}
